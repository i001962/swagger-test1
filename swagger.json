{
   "openapi": "3.0.1",
   "info": {
      "title": "SealAPI",
      "description": "Cryptowerk Horizon API (SealAPI) is a solution to verify the authenticity of data at massive scale using blockchains.\nWith the help of Cryptowerk Horizon API you can prove the existence of a document or any other kind of data at\na certain time without needing a trusted third party. This API supports high data volumes and reduces the cost\nof using a public blockchain. You never submit original data to Cryptowerk Horizon API, only hashes of data.\nThis provides the highest possible security, efficiency, and ease of implementation.\n\n## Overview\n\nCryptowerk Horizon API writes hashes of data into the Bitcoin and Ethereum blockchain by default. Hashes will be\nsubmitted in the register call and the result contains a unique retrieval-ID. Cryptowerk bundles the collected\nhashes and creates a single super-hash. This super-hash is then written into the Bitcoin blockchain and Ethereum\nblockchain. After the super-hash has been stored in one or more blockchains, the retrieval-ID will be exchanged\nwith a Seal. A Seal contains all information necessary to prove that the hashes registered are now part of the\nchosen blockchains.\n\nThe flows supported by this API are:\n\nHash(es)  -->  retrieval-ID  -->  Seal\n\nThe retrieval-ID for each hash can be found in the response JSON of a sucessful 'register' call.\n\nThere are two approaches to retrieve the actual Seal:\n\n### Polling\n\nCall `/verify` in an interval and provide the retrievalID(s) and check for the return value.\nIf you don't have the retrievalID, you can also use the hash originally registered.\nNote though that there could be duplicates returned. (Hashes are not unique)\n\n### Webhook and Callback\n\nSpecify a `callback` URL when registering hashes using `/register`.\nOnce the Seal becomes available the Cryptowerk Horizon API will make a `POST` request to the URL given.\nThe `User-Agent` header of the request identifies the Cryptowerk Server and is set to `Cryptowerk Callback v1`.\n\nIf the endpoint is unavailable, Cryptowerk will retry every 5 minutes for 12 hours total. After that period, if your HTTP endpoint did not get operational within that timeframe, you can still retrieve your seal(s) using the verify API call.\n\nIn addition to using http or https, you can also publish a message to MQTT.\n\n## Seals\n\nA Seal contains the information required to prove that a document had been registered in a blockchain. I.e., among\nother things, it contains a (transaction) identifier in one or multiple blockchains, the hash of a document,\nthe conclusive mathematical proof linking the document to the blockchain demonstrating the document's existence at\nregistration time and it not having been tampered with, the time this document was submitted to the server and\nthe time it was submitted to the blockchain.\n\n\n## API Credentials\n\nAuthentication is based on providing your API key and signing with the API secret.\nYou can request an API key and secret in the Developer portal.\n\nIn the examples below, the API key and secret is transmitted as custom header X-API-Key.\nTo create a valid value concatenate the API Key and secret separated by a space.\n\n```shell\nX-API-Key: V....o= A...DRM=\"\n```\n\n```java\nHttpURLConnection con = ...\ncon.addRequestProperty(\"X-API-Header\", apiKey + \" \"+ apiSecret);\n```\n\nYou can also transmit the information in query parameters as an alternative (see API docs below)\n",
      "version": "2019-01-04-1",
      "contact": {
         "name": "Cryptowerk",
         "email": "support@cryptowerk.com",
         "url": "https://www.cryptowerk.com"
      },
      "license": {
         "name": "Proprietary license."
      }
   },
   "x-sap-shortText": "Interface for the Enterprise Blockchain Enablement Service from Cryptowerk.",
   "servers": [
      {
         "url": "${platformUrl}/API/v8"
      },
      {
         "url": "${platformUrl}/API/v7"
      },
      {
         "url": "${platformUrl}/API/v6"
      }
   ],
   "externalDocs": {
      "description": "User Guide and Examples",
      "url": "../../../apiResources/asset/userguide/SealAPI.html"
   },
   "tags": [
      {
         "name": "Sealing",
         "description": "Operations related to sealing generic data items."
      }
   ],
   "components": {
      "securitySchemes": {
         "APIKeyHeader": {
            "description": "Concatenation of the API key and secret separated by a space.\n",
            "type": "apiKey",
            "in": "header",
            "name": "X-API-Key"
         }
      },
      "schemas": {
         "Empty": {
            "type": "object",
            "title": "Empty Schema"
         },
         "Seal": {
            "type": "object",
            "properties": {
               "bundleMethod": {
                  "type": "string",
                  "default": "BALANCED_MERKLE_TREE",
                  "example": "BALANCED_MERKLE_TREE"
               },
               "operations": {
                  "type": "array",
                  "items": {
                     "oneOf": [
                        {
                           "type": "object",
                           "properties": {
                              "opcode": {
                                 "type": "string",
                                 "enum": [
                                    "DOC_SHA256"
                                 ]
                              },
                              "docHash": {
                                 "type": "string",
                                 "minLength": 64,
                                 "maxLength": 64,
                                 "example": "181210f8f9c779c26da1d9b2075bde0127302ee0e3fca38c9a83f5b1dd8e5d3b"
                              }
                           }
                        },
                        {
                           "type": "object",
                           "properties": {
                              "opcode": {
                                 "type": "string",
                                 "enum": [
                                    "APPEND_THEN_SHA256"
                                 ]
                              },
                              "hash": {
                                 "type": "string",
                                 "minLength": 64,
                                 "maxLength": 64,
                                 "example": "181210f8f9c779c26da1d9b2075bde0127302ee0e3fca38c9a83f5b1dd8e5d3b"
                              }
                           }
                        },
                        {
                           "type": "object",
                           "properties": {
                              "opcode": {
                                 "type": "string",
                                 "enum": [
                                    "PREPEND_THEN_SHA256"
                                 ]
                              },
                              "hash": {
                                 "type": "string",
                                 "minLength": 64,
                                 "maxLength": 64,
                                 "example": "181210f8f9c779c26da1d9b2075bde0127302ee0e3fca38c9a83f5b1dd8e5d3b"
                              }
                           }
                        },
                        {
                           "type": "object",
                           "properties": {
                              "opcode": {
                                 "type": "string",
                                 "enum": [
                                    "ANCHOR_SHA256"
                                 ]
                              },
                              "hash": {
                                 "type": "string",
                                 "minLength": 64,
                                 "maxLength": 64,
                                 "example": "181210f8f9c779c26da1d9b2075bde0127302ee0e3fca38c9a83f5b1dd8e5d3b"
                              }
                           }
                        },
                        {
                           "type": "object",
                           "properties": {
                              "opcode": {
                                 "type": "string",
                                 "enum": [
                                    "BLOCKCHAIN"
                                 ]
                              },
                              "blockchainGeneralName": {
                                 "type": "string"
                              },
                              "instanceName": {
                                 "type": "string"
                              },
                              "blockChainId": {
                                 "type": "string"
                              },
                              "insertedIntoBlockchainAt": {
                                 "type": "integer",
                                 "format": "int64"
                              }
                           }
                        },
                        {
                           "type": "object",
                           "properties": {
                              "opcode": {
                                 "type": "string",
                                 "enum": [
                                    "DOCUMENTINFO"
                                 ]
                              },
                              "lookupInfo": {
                                 "type": "string"
                              },
                              "name": {
                                 "type": "string"
                              },
                              "contentType": {
                                 "type": "string"
                              },
                              "submittedAt": {
                                 "type": "integer",
                                 "format": "int64"
                              }
                           }
                        },
                        {
                           "type": "object",
                           "properties": {
                              "opcode": {
                                 "type": "string",
                                 "enum": [
                                    "SEALEDMETADATA"
                                 ]
                              },
                              "data": {
                                 "type": "string"
                              },
                              "metaDataStamps": {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/Seal"
                                 }
                              }
                           }
                        }
                     ]
                  }
               }
            }
         },
         "Registration": {
            "type": "object",
            "properties": {
               "minSupportedAPIVersion": {
                  "type": "integer",
                  "description": "API version must be greater or equal to this value on this server\n"
               },
               "maxSupportedAPIVersion": {
                  "type": "integer",
                  "description": "API version must be less or equal to this value on this server\n"
               },
               "documents": {
                  "type": "array",
                  "items": {
                     "type": "object",
                     "properties": {
                        "retrievalId": {
                           "type": "string",
                           "description": "This ID can be used to verify the existence of a document (see /verify)\n"
                        }
                     }
                  }
               }
            }
         },
         "Verification": {
            "type": "object",
            "properties": {
               "minSupportedAPIVersion": {
                  "type": "integer",
                  "description": "API version must be greater or equal to this value on this server\n"
               },
               "maxSupportedAPIVersion": {
                  "type": "integer",
                  "description": "API version must be less or equal to this value on this server\n"
               },
               "documents": {
                  "description": "Array of documents that were found by the given parameters",
                  "type": "array",
                  "items": {
                     "type": "object",
                     "properties": {
                        "retrievalId": {
                           "description": "Unique identifier for the document.",
                           "type": "string"
                        },
                        "seals": {
                           "type": "array",
                           "description": "A Seal contains the information required to prove that a document had been registered in a blockchain.\nI.e., among other things, it contains a (transaction) identifier in one or multiple blockchains, the hash of a document,\nthe conclusive mathematical proof linking the document to the blockchain demonstrating the document's existence at\nregistration time and it not having been tampered with, the time this document was\nsubmitted to the server and the time it was submitted to\nthe blockchain.\n",
                           "items": {
                              "$ref": "#/components/schemas/Seal"
                           }
                        },
                        "name": {
                           "type": "string",
                           "description": "This is the same name that was used for the registration of this document.\n"
                        },
                        "submittedAt": {
                           "type": "integer",
                           "format": "int64",
                           "description": "Time stamp when this document/hash was received by the server (milliseconds since 1/1/1970 12:00am UST)\n"
                        },
                        "contentType": {
                           "type": "string",
                           "description": "This is the same content type as on registration of the document.\n"
                        },
                        "hasBeenInsertedIntoAtLeastOneBlockchain": {
                           "type": "boolean",
                           "description": "This property is true, if the document has been registered with at least one blockchain, otherwise it is false.\n"
                        },
                        "hasBeenInsertedIntoAllRequestedBlockchains": {
                           "type": "boolean",
                           "description": "This property is true, if the document has been registered with all requested blockchains, otherwise it is false.\n"
                        },
                        "blockchainRegistrations": {
                           "type": "array",
                           "items": {
                              "type": "object",
                              "properties": {
                                 "blockChainId": {
                                    "type": "string",
                                    "description": "id for the used blockchain."
                                 },
                                 "insertedIntoBlockchainAt": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "Time stamp for the blockchain registration of the document bundle that contains this document in the\nblockchain (milliseconds since 1/1/1970 12:00am UST).\n"
                                 },
                                 "numConfirmations": {
                                    "type": "integer",
                                    "description": "Number of verifications that witness the document bundle in the blockchain.\n"
                                 },
                                 "blockChainDesc": {
                                    "type": "object",
                                    "properties": {
                                       "instanceName": {
                                          "type": "string",
                                          "description": "Name of the blockchain instance"
                                       },
                                       "generalName": {
                                          "type": "string",
                                          "description": "General name of the blockchain instance"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      },
      "parameters": {
         "apiVersion": {
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
               "type": "integer",
               "minimum": 1
            },
            "description": "API version to use by this call. Usually, you leave this empty and are specifying the version in the URL as .../vN/... . If for some reason you don't - or you want to override the version given in the URL - use this parameter."
         }
      }
   },
   "paths": {
      "/register": {
         "parameters": [
            {
               "$ref": "#/components/parameters/apiVersion"
            },
            {
               "in": "query",
               "name": "name",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "Name of the document"
            },
            {
               "in": "query",
               "name": "hashes",
               "required": true,
               "schema": {
                  "type": "string",
                  "default": "1111111111111111111111111111111111111111111111111111111111111111,2222222222222222222222222222222222222222222222222222222222222222"
               },
               "description": "Comma separated hexadecimal representation of the hashes for\nthe data to be registered for proof of existence.\n"
            },
            {
               "in": "query",
               "name": "contentType",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "This value describes the content type (mime type) of the data."
            },
            {
               "in": "query",
               "name": "lookupInfo",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "Here, you can provide your own information that later helps you in looking up your data where you want to put your seal. This can be any text string.\nFor instance, you might have a row in your database that holds the data you want to seal. This row might have a primary key that identifies it. You can set this parameter to this primary key of yours.\nLater when a callback (see below) arrives or when you use the verify API call (see below), this lookupInfo is provided to you. Actually it's both in the seal itself and in the API response document.\nSince you know that this actually is a primary key, you can easily retrieve the database row and store the seal in a column of that row.\nThis lookupInfo applies to all hashes provided.\n"
            },
            {
               "in": "query",
               "name": "lookupInfos",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "This parameter provides the same functionality as parameter 'lookupInfo'. However, you provide a potentially different lookupInfo for each hash as a list separated by comma.\n"
            },
            {
               "in": "query",
               "name": "callback",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "Callback specification for the registration events in the requested blockchains.\nYou can have a callback initiated either to a URL or to an email address or via an MQTT message.\nURL: Use 'http' as the protocol specifier, then either 'jsonplain' for a plain JSON object or\n'jsonformenc' for a URL-formencoded JSON object. Then add the http or https URL to call.\nYou can then add a format for the seal/stamp by adding a semicolon, 'stampFormat:' and either 'JSON'\nfor JSON or 'STREAM' for a compressed binary format.\nExamples:\nhttp:jsonplain:https://some.site.com/5d5803df-0e8b-4779-80e8 or\nhttp:jsonformenc:http://another.com/14nv2 or\nhttp:jsonformenc:http://yetanotherwebhook.com/14nve;stampFormat:JSON\n\nBy default, query parameters that you include in the URL are stripped from it and instead included in the POST body. For 'jsonplain', a JSON attribute 'query' is added that includes the key/value pairs from the query.\nThis is because it is generally discouraged to use query parameters, usually for a GET request, in a POST request.\nIf, however, you insist to issue a POST request including query parameters, add 'keepQuery:true'. For instance:\nhttp:jsonplain:https://some.site.com/5d5803df-0e8b-4779-80e8?myparameter=somevalue;keepQuery:true\n\nEmail: Use 'email' as the protocol specifier, then, like for 'http' use 'jsonplain' or 'jsonformenc',\nthen the email address, and then optionally a stamp format. Example:\nemail:jsonplain:callbacktest@somemaildomain.com\n\nMQTT: Use 'mqtt' as the protocol specifier, then the endpoint for the message broker, a semicolon,\nthe topic used for publishing, a semicolon, a JSON object template that might contain some id or reference\nfor your internal use and is filled with the event in JSON format. Note that you cannot use\na semicolon in the JSON template.\nExample:\nmqtt:tcp://mqttcc1.cryptowerk.com:1883;test/topic2;{myCustomId:'someid1'}\n"
            },
            {
               "in": "query",
               "name": "apiKey",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "Key that identifies the account. It can be provided (1) here as a query parameter or (2) as a header named X-API-Key with apiKey and apiCredential separated by a blank space or (3) by logging in using AWS Cognito."
            },
            {
               "in": "query",
               "name": "apiCredential",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "A credential matching a user of an account. It can be provided (1) here as a query parameter or (2) as a header named X-API-Key with apiKey and apiCredential separated by a blank space or (3) by logging in using AWS Cognito. The API credential is only valid together with the API key. It verifies the authenticity of the account access."
            }
         ],
         "post": {
            "tags": [
               "Sealing"
            ],
            "security": [
               {
                  "APIKeyHeader": []
               }
            ],
            "x-amazon-apigateway-integration": {
               "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:283356447406:function:SealCentralStationsandbox/invocations",
               "responses": {
                  "default": {
                     "statusCode": "200"
                  }
               },
               "passthroughBehavior": "when_no_match",
               "httpMethod": "POST",
               "type": "aws_proxy"
            },
            "summary": "Register hashes",
            "operationId": "register",
            "description": "The register command posts a hash of a document or any data for\nregistration on a blockchain. The blockchain entry can later be used as\na mathematical proof for the existence of this data at the moment it was\nposted.\n",
            "responses": {
               "200": {
                  "description": "Successful response",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/Registration"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request (for example - header field missing, wrong filter, validation failed)\n"
               },
               "403": {
                  "description": "Forbidden (insufficient authorization)"
               },
               "500": {
                  "description": "Internal server error"
               }
            }
         }
      },
      "/verify": {
         "parameters": [
            {
               "$ref": "#/components/parameters/apiVersion"
            },
            {
               "in": "query",
               "name": "retrievalId",
               "description": "This is the retrievalId that was returned in a previous 'register' call.\n",
               "schema": {
                  "type": "string",
                  "example": "ri2125374bdcbc82d69be2d9ea928e1c01cb5baf53d6bd8c163f56579bb6f8452ead11440"
               },
               "required": false
            },
            {
               "in": "query",
               "name": "retrievalIds",
               "description": "Here you can specify more than one 'retrievalId' in order to check more than one previously submitted registration status.\n",
               "schema": {
                  "type": "array",
                  "items": {
                     "type": "string"
                  }
               },
               "required": false
            },
            {
               "in": "query",
               "name": "provideVerificationInfos",
               "description": "This provides additional verification information.",
               "schema": {
                  "type": "boolean",
                  "default": false
               },
               "required": false
            },
            {
               "in": "query",
               "name": "verifyDocHashes",
               "description": "This is the start of the second group of operations, u.e. to verify a previously issued seal.\n\nNote that instead you also can verify that yourself. We provide software in source code for that purpose.\nThis ensures that you don't have to rely on us to be able to prove the existence of a registration to anyone.\nHowever, you might want to use this verification service for convenience.\nThis parameter contains a comma-separated list of hex-encoded hashes of the document(s) you want to check against a previous registration.\nAn example value would be:\n1111111111111111111111111111111111111111111111111111111111111111,\n2222222222222222222222222222222222222222222222222222222222222222\n",
               "schema": {
                  "type": "string"
               },
               "required": false
            },
            {
               "in": "query",
               "name": "seals",
               "description": "This is a comma-separated list of seals to check against the hashes.",
               "schema": {
                  "type": "string"
               },
               "required": false
            },
            {
               "in": "query",
               "name": "provideInstructions",
               "description": "This provides additional instructions to verify the hash(es).",
               "schema": {
                  "type": "boolean",
                  "default": false
               },
               "required": false
            },
            {
               "in": "query",
               "name": "apiKey",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "Key that identifies the account. It can be provided (1) here as a query parameter or (2) as a header named X-API-Key with apiKey and apiCredential separated by a blank space or (3) by logging in using AWS Cognito."
            },
            {
               "in": "query",
               "name": "apiCredential",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "A credential matching a user of an account. It can be provided (1) here as a query parameter or (2) as a header named X-API-Key with apiKey and apiCredential separated by a blank space or (3) by logging in using AWS Cognito. The API credential is only valid together with the API key. It verifies the authenticity of the account access."
            }
         ],
         "post": {
            "tags": [
               "Sealing"
            ],
            "security": [
               {
                  "APIKeyHeader": []
               }
            ],
            "x-amazon-apigateway-integration": {
               "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:283356447406:function:SealCentralStationsandbox/invocations",
               "responses": {
                  "default": {
                     "statusCode": "200"
                  }
               },
               "passthroughBehavior": "when_no_match",
               "httpMethod": "POST",
               "type": "aws_proxy"
            },
            "summary": "Verify hashes, check registration",
            "operationId": "verify",
            "description": "Either (1) check registration status of previously registered hashes or (2) verify a previously issued seal.\n",
            "responses": {
               "200": {
                  "description": "Successful response",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "minSupportedAPIVersion": {
                                 "type": "integer",
                                 "description": "API version must be greater or equal to this value on this server\n"
                              },
                              "maxSupportedAPIVersion": {
                                 "type": "integer",
                                 "description": "API version must be less or equal to this value on this server\n"
                              },
                              "documents": {
                                 "description": "Array of documents that were found by the given parameters",
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "retrievalId": {
                                          "description": "Unique identifier for the document.",
                                          "type": "string"
                                       },
                                       "seals": {
                                          "type": "array",
                                          "description": "A Seal contains the information required to prove that a document had been registered in a blockchain.\nI.e., among other things, it contains a (transaction) identifier in one or multiple blockchains, the hash of a document,\nthe conclusive mathematical proof linking the document to the blockchain demonstrating the document's existence at\nregistration time and it not having been tampered with, the time this document was\nsubmitted to the server and the time it was submitted to\nthe blockchain.\n",
                                          "items": {
                                             "$ref": "#/components/schemas/Seal"
                                          }
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "This is the same name that was used for the registration of this document.\n"
                                       },
                                       "submittedAt": {
                                          "type": "integer",
                                          "format": "int64",
                                          "description": "Time stamp when this document/hash was received by the server (milliseconds since 1/1/1970 12:00am UST)\n"
                                       },
                                       "contentType": {
                                          "type": "string",
                                          "description": "This is the same content type as on registration of the document.\n"
                                       },
                                       "hasBeenInsertedIntoAtLeastOneBlockchain": {
                                          "type": "boolean",
                                          "description": "This property is true, if the document has been registered with at least one blockchain, otherwise it is false.\n"
                                       },
                                       "hasBeenInsertedIntoAllRequestedBlockchains": {
                                          "type": "boolean",
                                          "description": "This property is true, if the document has been registered with all requested blockchains, otherwise it is false.\n"
                                       },
                                       "blockchainRegistrations": {
                                          "type": "array",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "blockChainId": {
                                                   "type": "string",
                                                   "description": "id for the used blockchain."
                                                },
                                                "insertedIntoBlockchainAt": {
                                                   "type": "integer",
                                                   "format": "int64",
                                                   "description": "Time stamp for the blockchain registration of the document bundle that contains this document in the\nblockchain (milliseconds since 1/1/1970 12:00am UST).\n"
                                                },
                                                "numConfirmations": {
                                                   "type": "integer",
                                                   "description": "Number of verifications that witness the document bundle in the blockchain.\n"
                                                },
                                                "blockChainDesc": {
                                                   "type": "object",
                                                   "properties": {
                                                      "instanceName": {
                                                         "type": "string",
                                                         "description": "Name of the blockchain instance"
                                                      },
                                                      "generalName": {
                                                         "type": "string",
                                                         "description": "General name of the blockchain instance"
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request (for example - header field missing, wrong filter,validation failed)\n"
               },
               "403": {
                  "description": "Forbidden (insufficient authorization)"
               },
               "500": {
                  "description": "Internal server error"
               }
            }
         }
      },
      "/cancelAllCallbacks": {
         "parameters": [
            {
               "$ref": "#/components/parameters/apiVersion"
            },
            {
               "in": "query",
               "name": "apiKey",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "Key that identifies the account. It can be provided (1) here as a query parameter or (2) as a header named X-API-Key with apiKey and apiCredential separated by a blank space or (3) by logging in using AWS Cognito."
            },
            {
               "in": "query",
               "name": "apiCredential",
               "required": false,
               "schema": {
                  "type": "string"
               },
               "description": "A credential matching a user of an account. It can be provided (1) here as a query parameter or (2) as a header named X-API-Key with apiKey and apiCredential separated by a blank space or (3) by logging in using AWS Cognito. The API credential is only valid together with the API key. It verifies the authenticity of the account access."
            }
         ],
         "post": {
            "tags": [
               "Sealing"
            ],
            "security": [
               {
                  "APIKeyHeader": []
               }
            ],
            "x-amazon-apigateway-integration": {
               "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:283356447406:function:SealCentralStationsandbox/invocations",
               "responses": {
                  "default": {
                     "statusCode": "200"
                  }
               },
               "passthroughBehavior": "when_no_match",
               "httpMethod": "POST",
               "type": "aws_proxy"
            },
            "description": "Cancel all pending callbacks belonging to your account. This is mainly useful for debugging in case your provided callback endpoint is under development. Then it may be that it is either not reachable or that it returns error codes. Instead of continuing to retry to invoke the callback you can clear the pending callbacks.",
            "responses": {
               "200": {
                  "description": "Successful response"
               },
               "400": {
                  "description": "Bad request (for example - header field missing, wrong filter, validation failed)"
               },
               "403": {
                  "description": "Forbidden (insufficient authorization)"
               },
               "500": {
                  "description": "Internal server error"
               }
            }
         }
      }
   }
}
